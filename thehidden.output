variables
{
    global:
        0: HiddenPlayer
        1: debugMode
        2: maxSurvivorHealth
        3: maxCharge
        4: tickrate
        5: tps
        6: charge
        7: rechargeRate
        8: ultCost
        9: ultActivateCost
        10: dashCost
        11: meleeCost
        12: ultActive
        13: debugBot
        14: playAsHidden
        15: survivors
        16: foreachIndex
        17: hero
        18: returnValue_GetMaxHealthOfHero
        19: i
}

subroutines
{
    0: disableGameFeatures
    1: setHiddenProps
    2: setSurvivorProps
    3: endGame
    4: removeHiddenProps
    5: disableUltimate
}

rule("Initialize variables")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 12
    actions
    {
        Set Global Variable(tickrate, Workshop Setting Integer(Custom String("Game Settings", Null, Null, Null), Custom String("Tickrate", Null, Null, Null), 40, 10, 40, 0));
        Set Global Variable(maxSurvivorHealth, Workshop Setting Integer(Custom String("Survivor Settings", Null, Null, Null), Custom String("Max health", Null, Null, Null), 250, 100, 500, 0));
        Set Global Variable(meleeCost, Workshop Setting Integer(Custom String("The Hidden Settings", Null, Null, Null), Custom String("Melee cost", Null, Null, Null), 25, 0, 100, 0));
        Set Global Variable(dashCost, Workshop Setting Integer(Custom String("The Hidden Settings", Null, Null, Null), Custom String("Dash cost", Null, Null, Null), 35, 0, 100, 1));
        Set Global Variable(ultActivateCost, Workshop Setting Integer(Custom String("The Hidden Settings", Null, Null, Null), Custom String("Ult activation cost", Null, Null, Null), 15, 0, 100, 2));
        Set Global Variable(ultCost, Workshop Setting Integer(Custom String("The Hidden Settings", Null, Null, Null), Custom String("Ult cost per second", Null, Null, Null), 30, 0, 100, 3));
        Set Global Variable(maxCharge, Workshop Setting Integer(Custom String("The Hidden Settings", Null, Null, Null), Custom String("Maximum charge", Null, Null, Null), 100, 0, 500, 4));
        Set Global Variable(rechargeRate, Workshop Setting Integer(Custom String("The Hidden Settings", Null, Null, Null), Custom String("Recharge rate", Null, Null, Null), 10, 0, 100, 5));
        Set Global Variable(debugMode, Workshop Setting Toggle(Custom String("Debug Settings", Null, Null, Null), Custom String("Debug Mode", Null, Null, Null), False, 0));
        Set Global Variable(playAsHidden, Workshop Setting Toggle(Custom String("Debug Settings", Null, Null, Null), Custom String("Play as Hidden", Null, Null, Null), False, 1));
        Set Global Variable(tps, Divide(1, Global Variable(tickrate)));
        Set Global Variable(charge, Global Variable(maxCharge));
    }
}

rule("onFullLobby")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == False;
        Is Assembling Heroes == False;
        Number Of Players(Team(All)) == 6;
    }

    // Action count: 1
    actions
    {
        Start Game Mode;
    }
}

rule("disableGameFeatures")
{

    event
    {
        Subroutine;
        disableGameFeatures;
    }

    // Action count: 4
    actions
    {
        Disable Built-In Game Mode Respawning(All Players(Team(All)));
        Disable Built-In Game Mode Completion;
        Disable Built-In Game Mode Scoring;
        Disable Kill Feed(All Players(Team(All)));
    }
}

rule("setHiddenProperties")
{

    event
    {
        Subroutine;
        setHiddenProps;
    }

    // Action count: 12
    actions
    {
        Start Forcing Player To Be Hero(Global Variable(HiddenPlayer), Hero(Genji));
        Set Invisible(Global Variable(HiddenPlayer), All);
        Set Move Speed(Global Variable(HiddenPlayer), 135);
        Set Damage Dealt(Global Variable(HiddenPlayer), 0);
        Set Melee Enabled(Global Variable(HiddenPlayer), False);
        Set Ability 1 Enabled(Global Variable(HiddenPlayer), False);
        Set Ability 2 Enabled(Global Variable(HiddenPlayer), False);
        Set Primary Fire Enabled(Global Variable(HiddenPlayer), False);
        Set Secondary Fire Enabled(Global Variable(HiddenPlayer), False);
        Set Ultimate Ability Enabled(Global Variable(HiddenPlayer), False);
        Disable Movement Collision With Players(Global Variable(HiddenPlayer));
        Create Effect(Players Within Radius(Global Variable(HiddenPlayer), 15, Team(Team1), Surfaces And All Barriers), Mei Frozen Effect, Color(Gray), Vector(X Component Of(Position Of(Global Variable(HiddenPlayer))), Add(Y Component Of(Position Of(Global Variable(HiddenPlayer))), 0.75), Z Component Of(Position Of(Global Variable(HiddenPlayer)))), 1.5, Visible To Position and Radius);
    }
}

rule("setSurvivorProperties")
{

    event
    {
        Subroutine;
        setSurvivorProps;
    }

    // Action count: 1
    actions
    {
        Set Player Health(All Living Players(Team(Team1)), Global Variable(maxSurvivorHealth));
    }
}

rule("startGame")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Assembling Heroes == True;
        Is Game In Progress == False;
    }

    // Action count: 57
    actions
    {
        If(Compare(Global Variable(debugMode), ==, False));
            Move Player To Team(First Of(All Players(Team(Team2))), Team(Team1), -1);
            Set Global Variable(HiddenPlayer, Random Value In Array(All Players(Team(Team1))));
            Move Player To Team(Global Variable(HiddenPlayer), Team(Team2), -1);
        Else;
            Create Dummy Bot(Hero(Genji), If-Then-Else(Global Variable(playAsHidden), Team(Team1), Team(Team2)), -1, Host Player, Facing Direction Of(Host Player));
            Set Global Variable(debugBot, Last Created Entity);
            Set Global Variable(HiddenPlayer, If-Then-Else(Global Variable(playAsHidden), Host Player, Players In Slot(0, Team(Team2))));
        End;
        Wait Until(Is Game In Progress, 30);
        Set Objective Description(Global Variable(HiddenPlayer), Custom String("Eliminate all the survivors", Null, Null, Null), Visible To);
        Set Objective Description(All Players(Team(Team1)), Custom String("Eliminate the hidden", Null, Null, Null), Visible To);
        Start Forcing Player Outlines(All Players(Team(All)), All Players(Team(All)), True, Custom Color(0, 0, 0, 0), Always);
        Call Subroutine(disableGameFeatures);
        Pause Match Time;
        For Global Variable(foreachIndex, 0, Count Of(All Living Players(Team(Team1))), 1);
            Wait Until(Has Spawned(Value In Array(All Living Players(Team(Team1)), Global Variable(foreachIndex))), 1);
            If(Has Spawned(Value In Array(All Living Players(Team(Team1)), Global Variable(foreachIndex))));
                Set Global Variable(hero, Hero Of(Value In Array(All Living Players(Team(Team1)), Global Variable(foreachIndex))));
                Skip(Value In Array(Array(31, 0, 3, 6, 9, 9, 9, 12, 15, 15, 15, 15, 18, 18, 18, 18, 21, 21, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 27, 30), Add(Index Of Array Value(Array(Hero(Roadhog), Hero(D.va), Hero(Reinhardt), Hero(Sigma), Hero(Orisa), Hero(Winston), Hero(Zarya), Hero(Doomfist), Hero(Junker Queen), Hero(Ramattra), Hero(Bastion), Hero(Wrecking Ball), Hero(Mei), Hero(Reaper), Hero(Torbjörn), Hero(Cassidy), Hero(Symmetra), Hero(Ashe), Hero(Echo), Hero(Genji), Hero(Hanzo), Hero(Junkrat), Hero(Pharah), Hero(Sojourn), Hero(Soldier: 76), Hero(Sombra), Hero(Ana), Hero(Baptiste), Hero(Brigitte), Hero(Kiriko), Hero(Lúcio), Hero(Mercy), Hero(Moira), Hero(Zenyatta), Hero(Widowmaker), Hero(Tracer)), Global Variable(hero)), 1)));
                Set Global Variable(returnValue_GetMaxHealthOfHero, 550);
                Skip(29);
                Skip(28);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 500);
                Skip(26);
                Skip(25);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 475);
                Skip(23);
                Skip(22);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 400);
                Skip(20);
                Skip(19);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 325);
                Skip(17);
                Skip(16);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 300);
                Skip(14);
                Skip(13);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 250);
                Skip(11);
                Skip(10);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 225);
                Skip(8);
                Skip(7);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 200);
                Skip(5);
                Skip(4);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 175);
                Skip(2);
                Skip(1);
                Set Global Variable(returnValue_GetMaxHealthOfHero, 150);
                Set Max Health(Value In Array(All Living Players(Team(Team1)), Global Variable(foreachIndex)), Add(Multiply(Divide(Global Variable(maxSurvivorHealth), Global Variable(returnValue_GetMaxHealthOfHero)), 100), 0.05));
            End;
        End;
        Wait Until(Has Spawned(Global Variable(HiddenPlayer)), 20);
        Call Subroutine(setHiddenProps);
        Call Subroutine(setSurvivorProps);
    }
}

rule("removeHiddenProperties")
{

    event
    {
        Subroutine;
        removeHiddenProps;
    }

    // Action count: 15
    actions
    {
        Stop Forcing Player To Be Hero(Global Variable(HiddenPlayer));
        Set Invisible(Global Variable(HiddenPlayer), None);
        Set Move Speed(Global Variable(HiddenPlayer), 100);
        Set Damage Dealt(Global Variable(HiddenPlayer), 100);
        Set Melee Enabled(Global Variable(HiddenPlayer), True);
        Set Ability 1 Enabled(Global Variable(HiddenPlayer), True);
        Set Ability 2 Enabled(Global Variable(HiddenPlayer), True);
        Set Primary Fire Enabled(Global Variable(HiddenPlayer), True);
        Set Secondary Fire Enabled(Global Variable(HiddenPlayer), True);
        Set Ultimate Ability Enabled(Global Variable(HiddenPlayer), True);
        Enable Movement Collision With Players(Global Variable(HiddenPlayer));
        Stop Forcing Player Outlines(All Players(Team(Team1)), Global Variable(HiddenPlayer));
        Destroy All Effects;
        Destroy All Progress Bar HUD Text;
        Destroy All HUD Text;
    }
}

rule("endGame")
{

    event
    {
        Subroutine;
        endGame;
    }

    // Action count: 6
    actions
    {
        Call Subroutine(removeHiddenProps);
        Set Global Variable(HiddenPlayer, Null);
        Set Global Variable(charge, Global Variable(maxCharge));
        Destroy All Dummy Bots;
        Unpause Match Time;
        Go To Assemble Heroes;
    }
}

rule("onDeath")
{

    event
    {
        Player died;
        All;
        All;
    }

    conditions
    {
        All Dead Players(Team Of(Event Player)) == All Players(Team Of(Event Player));
        Is Game In Progress == True;
    }

    // Action count: 5
    actions
    {
        Big Message(All Players(Team(All)), Custom String("{0}", If-Then-Else(Compare(Team Of(Event Player), ==, Team(Team1)), Custom String("The Hidden Wins!", Null, Null, Null), Custom String("The Survivors Win!", Null, Null, Null)), Null, Null));
        Set Slow Motion(25);
        Wait(2, Ignore Condition);
        Set Slow Motion(100);
        Call Subroutine(endGame);
    }
}

rule("customDash")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
        Or(Is Button Held(Global Variable(HiddenPlayer), Button(Ability 1)), Is Button Held(Global Variable(HiddenPlayer), Button(Secondary Fire))) == True;
        Global Variable(charge) >= Global Variable(dashCost);
    }

    // Action count: 2
    actions
    {
        Set Global Variable(charge, Subtract(Global Variable(charge), Global Variable(dashCost)));
        Apply Impulse(Global Variable(HiddenPlayer), Vector(X Component Of(Facing Direction Of(Global Variable(HiddenPlayer))), Add(Y Component Of(Facing Direction Of(Global Variable(HiddenPlayer))), 0.35), Z Component Of(Facing Direction Of(Global Variable(HiddenPlayer)))), 17.5, To World, Cancel Contrary Motion);
    }
}

rule("customMelee")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
        Or(Is Button Held(Global Variable(HiddenPlayer), Button(Primary Fire)), Is Button Held(Global Variable(HiddenPlayer), Button(Melee))) == True;
        Global Variable(charge) >= Global Variable(meleeCost);
    }

    // Action count: 9
    actions
    {
        Set Global Variable(charge, Subtract(Global Variable(charge), Global Variable(meleeCost)));
        Set Melee Enabled(Global Variable(HiddenPlayer), True);
        Press Button(Global Variable(HiddenPlayer), Button(Melee));
        Set Melee Enabled(Global Variable(HiddenPlayer), False);
        Set Damage Dealt(Global Variable(HiddenPlayer), 100);
        Damage(Ray Cast Hit Player(Eye Position(Global Variable(HiddenPlayer)), Add(Eye Position(Global Variable(HiddenPlayer)), Multiply(Facing Direction Of(Global Variable(HiddenPlayer)), 2)), All Players(Team(Team1)), Global Variable(HiddenPlayer), True), Global Variable(HiddenPlayer), 150);
        Set Damage Dealt(Global Variable(HiddenPlayer), 0);
        Play Effect(Global Variable(HiddenPlayer), Doomfist Rising Uppercut Impact Effect, Color(White), Ray Cast Hit Player(Eye Position(Global Variable(HiddenPlayer)), Add(Eye Position(Global Variable(HiddenPlayer)), Multiply(Facing Direction Of(Global Variable(HiddenPlayer)), 1.75)), All Players(Team(Team1)), Global Variable(HiddenPlayer), True), 1);
        Wait(1, Ignore Condition);
    }
}

rule("disableUlt")
{

    event
    {
        Subroutine;
        disableUltimate;
    }

    // Action count: 2
    actions
    {
        Set Global Variable(ultActive, False);
        Start Forcing Player Outlines(All Living Players(Team(Team1)), Global Variable(HiddenPlayer), True, Custom Color(0, 0, 0, 0), Always);
    }
}

rule("customUltimate")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
        Is Button Held(Global Variable(HiddenPlayer), Button(Ultimate)) == True;
        Or(Compare(Global Variable(charge), >=, Global Variable(ultActivateCost)), Global Variable(ultActive)) == True;
    }

    // Action count: 6
    actions
    {
        If(Global Variable(ultActive));
            Call Subroutine(disableUltimate);
            Abort;
        End;
        Set Global Variable(charge, Subtract(Global Variable(charge), Global Variable(ultActivateCost)));
        Set Global Variable(ultActive, True);
    }
}

rule("channelUlt")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
        Global Variable(ultActive) == True;
    }

    // Action count: 11
    actions
    {
        If(Compare(Global Variable(charge), >, Multiply(Global Variable(ultCost), Global Variable(tps))));
            Set Global Variable(i, 0);
            While(Compare(Global Variable(i), <, Number Of Living Players(Team(Team1))));
                Start Forcing Player Outlines(Value In Array(All Living Players(Team(Team1)), Global Variable(i)), Global Variable(HiddenPlayer), True, Custom Color(Divide(255, Health(Value In Array(All Living Players(Team(Team1)), Global Variable(i)))), Divide(255, Divide(Global Variable(maxSurvivorHealth), Health(Value In Array(All Living Players(Team(Team1)), Global Variable(i))))), 0, 255), Always);
                Modify Global Variable(i, Add, 1);
            End;
            Set Global Variable(charge, Subtract(Global Variable(charge), Multiply(Global Variable(ultCost), Global Variable(tps))));
            Wait(Global Variable(tps), Ignore Condition);
            Loop;
        End;
        Call Subroutine(disableUltimate);
    }
}

rule("hiddenHUD")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    // Action count: 2
    actions
    {
        Create HUD Text(Global Variable(HiddenPlayer), Null, Null, Custom String("Dash: Secondary Fire\nMelee: Primary Fire\nSpecial: Ultimate", Null, Null, Null), Left, 0, Color(White), Color(White), Color(White), Visible To, Default Visibility);
        Create Progress Bar HUD Text(Global Variable(HiddenPlayer), Global Variable(charge), Null, Left, 1, Color(Gray), Color(White), Values, Default Visibility);
    }
}

rule("recharge")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == True;
        Not(Is On Wall(Global Variable(HiddenPlayer))) == True;
        Not(Global Variable(ultActive)) == True;
        Global Variable(charge) < Global Variable(maxCharge);
    }

    // Action count: 3
    actions
    {
        Set Global Variable(charge, If-Then-Else(Compare(Add(Global Variable(charge), Multiply(Global Variable(rechargeRate), Global Variable(tps))), >=, 100), 100, Add(Global Variable(charge), Multiply(Global Variable(rechargeRate), Global Variable(tps)))));
        Wait(Global Variable(tps), Abort When False);
        Loop;
    }
}
