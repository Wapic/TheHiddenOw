import "customGameSettings.lobby";

globalvar define HiddenPlayer = null;
globalvar define debugMode = false;
globalvar define playerHealth = 250;
globalvar define maxCharge = 100;
globalvar define tickrate = 40;
globalvar define tps = 1 / tickrate;
globalvar define charge = 100; //currentCharge
globalvar define rechargeRate = 10; //charge per seconds
globalvar define ultCost = 30; //charge per second
globalvar define ultActivateCost = 15; //cost per activation
globalvar define dashCost = 35; //cost per usage
globalvar define meleeCost = 25; //cost per usage
globalvar define ultActive = false;

rule: "onFullLobby"
if (IsGameInProgress() == false)
if (IsAssemblingHeroes() == false)
if (NumberOfPlayers(Team.All) == 6) {
    StartGameMode();
}

void disableGameFeatures() "disableGameFeatures" {
    DisableRespawning(AllPlayers(Team.All));
    DisableCompletion();
    DisableScoring();
    DisableKillFeed(AllPlayers(Team.All));
}

void endGame() "endGame" {
    removeHiddenProps();
    HiddenPlayer = null;
    UnpauseMatchTime();
    GoToAssembleHeroes();
}

rule: "startGame" 
if (IsAssemblingHeroes() == true) 
if (IsGameInProgress() == false) {
    MovePlayerToTeam(AllPlayers(Team.Team2)[0], Team.Team1, -1);
    HiddenPlayer = RandomValueInArray(AllPlayers(Team.Team1));
    MovePlayerToTeam(HiddenPlayer, Team.Team2, -1);
    WaitUntil(IsGameInProgress(), 30);
    SetObjectiveDescription(HiddenPlayer, "Eliminate all the survivors" ,HudTextRev.VisibleTo);
    SetObjectiveDescription(AllPlayers(Team.Team1), "Eliminate the hidden", HudTextRev.VisibleTo);
    StartForcingPlayerOutlines(AllPlayers(Team.All), AllPlayers(Team.All), true, CustomColor(0, 0, 0, 0), OutlineType.Always);
    disableGameFeatures();
    PauseMatchTime();
    setSurvivorProperties();
}

rule: "onDeath"
Event.OnDeath
Team.All
if (AllDeadPlayers(TeamOf(EventPlayer())) == AllPlayers(TeamOf(EventPlayer())))
if (IsGameInProgress() == true) {
    BigMessage(AllPlayers(Team.All), <"<0>", TeamOf(EventPlayer()) == Team.Team1 ? "The Hidden Wins!" : "The Survivors Win!">);
    SetSlowMotion(25);
    Wait(2);
    SetSlowMotion(100);
    endGame();
}

rule: "setHiddenProperties"
Event.OngoingPlayer
Team.Team2
Player.Slot0
if (HiddenPlayer != null) { //why this doesn't work as a subroutine/void is beyond me
    ForcePlayerHero(HiddenPlayer, Hero.Genji);
    SetInvisible(HiddenPlayer, InvisibleTo.All);
    SetMoveSpeed(HiddenPlayer, 135);
    SetDamageDealt(HiddenPlayer, 0);
    SetMeleeEnabled(HiddenPlayer, false);
    SetAbility1Enabled(HiddenPlayer, false);
    SetAbility2Enabled(HiddenPlayer, false);
    SetPrimaryFireEnabled(HiddenPlayer, false);
    SetSecondaryFireEnabled(HiddenPlayer, false);
    SetUltimateAbilityEnabled(HiddenPlayer, false);
    DisableMovementCollisionWithPlayers(HiddenPlayer);
    CreateEffect(PlayersWithinRadius(HiddenPlayer, 15, Team.Team1, RadiusLOS.SurfacesAndAllBarriers), Effect.MeiFrozenEffect, Color.Gray, Vector(PositionOf(HiddenPlayer).X, PositionOf(HiddenPlayer).Y + 0.75, PositionOf(HiddenPlayer).Z), 1.5, EffectRev.VisibleToPositionAndRadius);
}

void removeHiddenProps() "removeHiddenProperties" {
    StopForcingHero(HiddenPlayer);
    SetInvisible(HiddenPlayer, InvisibleTo.None);
    SetMoveSpeed(HiddenPlayer, 100);
    SetDamageDealt(HiddenPlayer, 100);
    SetMeleeEnabled(HiddenPlayer, true);
    SetAbility1Enabled(HiddenPlayer, true);
    SetAbility2Enabled(HiddenPlayer, true);
    SetPrimaryFireEnabled(HiddenPlayer, true);
    SetSecondaryFireEnabled(HiddenPlayer, true);
    SetUltimateAbilityEnabled(HiddenPlayer, true);
    EnableMovementCollisionWithPlayers(HiddenPlayer);
    StopForcingPlayerOutlines(AllPlayers(Team.Team1), HiddenPlayer);
    DestroyAllEffects();
    DestroyAllProgressBarHudText();
    DestroyAllHudText();
}

rule: "customDash"
if ((IsGameInProgress() || debugMode) == true)
if ((IsButtonHeld(HiddenPlayer, Button.Ability1) || IsButtonHeld(HiddenPlayer, Button.SecondaryFire)) == true)
if (charge >= dashCost) {
    charge = charge - dashCost;
    ApplyImpulse(HiddenPlayer,Vector(FacingDirectionOf(HiddenPlayer).X, FacingDirectionOf(HiddenPlayer).Y + 0.35, FacingDirectionOf(HiddenPlayer).Z), 17.5, Relative.ToWorld, ContraryMotion.Cancel);
}

rule: "customMelee"
if ((IsGameInProgress() || debugMode) == true)
if ((IsButtonHeld(HiddenPlayer, Button.PrimaryFire) || IsButtonHeld(HiddenPlayer, Button.Melee)) == true)
if (charge >= meleeCost) {
    charge = charge - meleeCost;
    SetMeleeEnabled(HiddenPlayer, true);
    PressButton(HiddenPlayer, Button.Melee); //play melee animation
    SetMeleeEnabled(HiddenPlayer, false);
    SetDamageDealt(HiddenPlayer, 100);
    Damage(RayCastHitPlayer(EyePosition(HiddenPlayer), EyePosition(HiddenPlayer) + FacingDirectionOf(HiddenPlayer) * 1.75, AllPlayers(Team.Team1), HiddenPlayer, true), HiddenPlayer, 150);
    SetDamageDealt(HiddenPlayer, 0);
    PlayEffect(HiddenPlayer, PlayEffect.DoomfistRisingUppercutImpactEffect, Color.White, RayCastHitPlayer(EyePosition(HiddenPlayer), EyePosition(HiddenPlayer) + FacingDirectionOf(HiddenPlayer) * 1.75, AllPlayers(Team.Team1), HiddenPlayer, true), 1);
    Wait(1, WaitBehavior.IgnoreCondition); //wait 1s to allow melee animation to be available again
}

rule: "customUltimate"
if((IsGameInProgress() || debugMode) == true)
if(IsButtonHeld(HiddenPlayer, Button.Ultimate) == true)
if((charge >= ultActivateCost || ultActive) == true) {
    charge = ultActive ? charge : charge - ultActivateCost;
    ultActive = !ultActive;
}

rule: "channelUlt" 
if((IsGameInProgress() || debugMode) == true)
if(ultActive) {
    if(charge > (ultCost * tps)) {
        for (define i = 0; i < NumberOfLivingPlayers(Team.Team1); i++) {
            StartForcingPlayerOutlines(AllLivingPlayers(Team.Team1)[i], HiddenPlayer, true, CustomColor(255 / Health(AllLivingPlayers(Team.Team1)[i]), 255 / (playerHealth / Health(AllLivingPlayers(Team.Team1)[i])), 0, 255), OutlineType.Always);    
        }
        charge = charge - (ultCost * tps);
        Wait(tps, WaitBehavior.AbortWhenFalse);
        Loop();
    }
    ultActive = false;
    StartForcingPlayerOutlines(AllLivingPlayers(Team.Team1), HiddenPlayer, true, CustomColor(0,0,0,0), OutlineType.Always);
}

void setSurvivorProperties() "setSurvivorProps" {
    for (define n = 0; n < NumberOfPlayers(Team.Team1); n++){
        if(MaxHealth(AllPlayers(Team.Team1)[n]) != 250){
            SetMaxHealth(AllPlayers(Team.Team1)[n], playerHealth / MaxHealth(AllLivingPlayers(Team.Team1)[n]) * 100);
            SetPlayerHealth(AllPlayers(Team.Team1)[n], playerHealth);
            Wait(0.1);
        }
    }
}

rule: "hiddenHUD"
Event.OngoingGlobal
if((IsGameInProgress() || debugMode) == true) {
    CreateHudText(HiddenPlayer, null, null, "Dash: Secondary Fire\nMelee: Primary Fire\nSpecial: Ultimate", Location.Left, 0, Color.White, Color.White, Color.White, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
    CreateProgressBarHudText(HiddenPlayer, charge, null, Location.Left, 1, Color.Gray, Color.White, ProgressBarHudEvaluation.Values, Spectators.DefaultVisibility);
}

rule: "recharge"
if((IsGameInProgress() || debugMode) == true)
if(!IsOnWall(HiddenPlayer))
if(!ultActive)
if(charge < maxCharge) {
    charge = charge + (rechargeRate * tps) >= 100 ? 100: charge + (rechargeRate * tps);
    Wait(tps, WaitBehavior.AbortWhenFalse);
    Loop();
}

rule: "toggleDebugMode"
if (IsGameInProgress() == false)
if (IsButtonHeld(HostPlayer(), Button.Interact) == true) {
    if (debugMode) {
        DestroyAllDummyBots();
        removeHiddenProps();
        HiddenPlayer = null;
        debugMode = false;
    } else {
        CreateDummyBot(Hero.Roadhog, OppositeTeamOf(TeamOf(HostPlayer())), -1, HostPlayer(), HostPlayer());
        HiddenPlayer = TeamOf(HostPlayer()) == Team.Team1 ? ClosestPlayerTo(HostPlayer()) : HostPlayer();
        debugMode = true;
    }
}