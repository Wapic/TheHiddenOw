variables
{
    global:
        0: HiddenPlayer
        1: debugMode
        2: playerHealth
        3: maxCharge
        4: tickrate
        5: charge
        6: rechargeRate
        7: ultCost
        8: dashCost
        9: meleeCost
        10: ultActive
}

subroutines
{
    0: EndGame
    1: removeHiddenProps
}

rule("Initial Global")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 11
    actions
    {
        Set Global Variable(HiddenPlayer, Null);
        Set Global Variable(debugMode, False);
        Set Global Variable(playerHealth, 250);
        Set Global Variable(maxCharge, 100);
        Set Global Variable(tickrate, 40);
        Set Global Variable(charge, 100);
        Set Global Variable(rechargeRate, 10);
        Set Global Variable(ultCost, 30);
        Set Global Variable(dashCost, 35);
        Set Global Variable(meleeCost, 25);
        Set Global Variable(ultActive, False);
    }
}

rule("onFullLobby")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == False;
        Is Assembling Heroes == False;
        Number Of Players(Team(All)) == 6;
    }

    // Action count: 1
    actions
    {
        Start Game Mode;
    }
}

rule("StartGame")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Assembling Heroes == True;
        Is Game In Progress == False;
    }

    // Action count: 9
    actions
    {
        Move Player To Team(First Of(All Players(Team(Team2))), Team(Team1), -1);
        Wait Until(Is Game In Progress, 30);
        Set Global Variable(HiddenPlayer, Random Value In Array(All Players(Team(Team1))));
        Move Player To Team(Global Variable(HiddenPlayer), Team(Team2), -1);
        Disable Built-In Game Mode Respawning(All Players(Team(All)));
        Disable Built-In Game Mode Completion;
        Big Message(All Players(Team(Team1)), Custom String("Game started! Eliminate the Hidden.", Null, Null, Null));
        Big Message(All Players(Team(Team2)), Custom String("Game started! Eliminate the Survivors.", Null, Null, Null));
        Pause Match Time;
    }
}

rule("removeHiddenProperties")
{

    event
    {
        Subroutine;
        removeHiddenProps;
    }

    // Action count: 13
    actions
    {
        Stop Forcing Player To Be Hero(Global Variable(HiddenPlayer));
        Set Invisible(Global Variable(HiddenPlayer), None);
        Set Move Speed(Global Variable(HiddenPlayer), 100);
        Set Damage Dealt(Global Variable(HiddenPlayer), 100);
        Set Ability 1 Enabled(Global Variable(HiddenPlayer), True);
        Set Ability 2 Enabled(Global Variable(HiddenPlayer), True);
        Set Primary Fire Enabled(Global Variable(HiddenPlayer), True);
        Set Secondary Fire Enabled(Global Variable(HiddenPlayer), True);
        Set Ultimate Ability Enabled(Global Variable(HiddenPlayer), True);
        Enable Movement Collision With Players(Global Variable(HiddenPlayer));
        Stop Forcing Player Outlines(All Players(Team(Team1)), Global Variable(HiddenPlayer));
        Destroy All Effects;
        Destroy All Progress Bar HUD Text;
    }
}

rule("EndGame")
{

    event
    {
        Subroutine;
        EndGame;
    }

    // Action count: 9
    actions
    {
        Call Subroutine(removeHiddenProps);
        Set Global Variable(HiddenPlayer, Null);
        Enable Built-In Game Mode Respawning(All Players(Team(All)));
        Unpause Match Time;
        If(Is Match Complete);
            Restart Match;
            Wait(15, Ignore Condition);
            Start Game Mode;
        End;
    }
}

rule("onDeath")
{

    event
    {
        Player died;
        All;
        All;
    }

    conditions
    {
        All Dead Players(Team Of(Event Player)) == All Players(Team Of(Event Player));
        Is Game In Progress == True;
    }

    // Action count: 3
    actions
    {
        Big Message(All Players(Team(All)), Custom String("{0} Wins!", Opposite Team Of(Team Of(Event Player)), Null, Null));
        Declare team Victory(Opposite Team Of(Team Of(Event Player)));
        Call Subroutine(EndGame);
    }
}

rule("setHiddenProperties")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
    }

    // Action count: 12
    actions
    {
        Start Forcing Player To Be Hero(Global Variable(HiddenPlayer), Hero(Genji));
        Set Invisible(Global Variable(HiddenPlayer), All);
        Set Move Speed(Global Variable(HiddenPlayer), 135);
        Set Damage Dealt(Global Variable(HiddenPlayer), 0);
        Set Ability 1 Enabled(Global Variable(HiddenPlayer), False);
        Set Ability 2 Enabled(Global Variable(HiddenPlayer), False);
        Set Primary Fire Enabled(Global Variable(HiddenPlayer), False);
        Set Secondary Fire Enabled(Global Variable(HiddenPlayer), False);
        Set Ultimate Ability Enabled(Global Variable(HiddenPlayer), False);
        Disable Movement Collision With Players(Global Variable(HiddenPlayer));
        Start Forcing Player Outlines(All Living Players(Team(Team1)), Global Variable(HiddenPlayer), True, Custom Color(0, 0, 0, 0), Always);
        Create Effect(Players Within Radius(Global Variable(HiddenPlayer), 15, Team(Team1), Surfaces And All Barriers), Mei Frozen Effect, Color(Gray), Vector(X Component Of(Position Of(Global Variable(HiddenPlayer))), Add(Y Component Of(Position Of(Global Variable(HiddenPlayer))), 0.75), Z Component Of(Position Of(Global Variable(HiddenPlayer)))), 1.5, Visible To Position and Radius);
    }
}

rule("customDash")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
        Or(Is Button Held(Global Variable(HiddenPlayer), Button(Ability 1)), Is Button Held(Global Variable(HiddenPlayer), Button(Secondary Fire))) == True;
        Global Variable(charge) >= Global Variable(dashCost);
    }

    // Action count: 2
    actions
    {
        Apply Impulse(Global Variable(HiddenPlayer), Vector(X Component Of(Facing Direction Of(Global Variable(HiddenPlayer))), Add(Y Component Of(Facing Direction Of(Global Variable(HiddenPlayer))), 0.35), Z Component Of(Facing Direction Of(Global Variable(HiddenPlayer)))), 17.5, To World, Cancel Contrary Motion);
        Set Global Variable(charge, Subtract(Global Variable(charge), Global Variable(dashCost)));
    }
}

rule("customMelee")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
        Or(Is Button Held(Global Variable(HiddenPlayer), Button(Primary Fire)), Is Button Held(Global Variable(HiddenPlayer), Button(Melee))) == True;
        Global Variable(charge) >= Global Variable(meleeCost);
    }

    // Action count: 6
    actions
    {
        Play Effect(Global Variable(HiddenPlayer), Doomfist Rising Uppercut Impact Effect, Color(White), Ray Cast Hit Player(Eye Position(Global Variable(HiddenPlayer)), Add(Eye Position(Global Variable(HiddenPlayer)), Multiply(Facing Direction Of(Global Variable(HiddenPlayer)), 1.6)), All Players(Team(Team1)), Global Variable(HiddenPlayer), True), 1);
        Set Damage Dealt(Global Variable(HiddenPlayer), 100);
        Damage(Ray Cast Hit Player(Eye Position(Global Variable(HiddenPlayer)), Add(Eye Position(Global Variable(HiddenPlayer)), Multiply(Facing Direction Of(Global Variable(HiddenPlayer)), 1.75)), All Players(Team(Team1)), Global Variable(HiddenPlayer), True), Global Variable(HiddenPlayer), 150);
        Set Damage Dealt(Global Variable(HiddenPlayer), 0);
        Press Button(Global Variable(HiddenPlayer), Button(Melee));
        Set Global Variable(charge, Subtract(Global Variable(charge), Global Variable(meleeCost)));
    }
}

rule("customUltimate")
{

    event
    {
        Ongoing - Each Player;
        Team1;
        All;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
        Is Button Held(Global Variable(HiddenPlayer), Button(Ultimate)) == True;
    }

    // Action count: 2
    actions
    {
        Set Global Variable(ultActive, Not(Global Variable(ultActive)));
        Start Forcing Player Outlines(All Living Players(Team(Team1)), Global Variable(HiddenPlayer), True, If-Then-Else(Compare(Global Variable(ultActive), ==, True), Custom Color(Divide(255, Health(Event Player)), Divide(255, Divide(Global Variable(playerHealth), Health(Event Player))), 0, 255), Custom Color(0, 0, 0, 0)), Always);
    }
}

rule("channelUlt")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
        Global Variable(ultActive) == True;
    }

    // Action count: 7
    actions
    {
        If(Compare(Global Variable(charge), <, 1));
            Set Global Variable(ultActive, False);
            Start Forcing Player Outlines(All Living Players(Team(Team1)), Global Variable(HiddenPlayer), True, Custom Color(0, 0, 0, 0), Always);
        End;
        Set Global Variable(charge, Subtract(Global Variable(charge), Multiply(Global Variable(ultCost), Divide(1, Global Variable(tickrate)))));
        Wait(Divide(1, Global Variable(tickrate)), Abort When False);
        Loop;
    }
}

rule("setSurvivorProperties")
{

    event
    {
        Ongoing - Each Player;
        Team1;
        All;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
    }

    // Action count: 2
    actions
    {
        Set Max Health(Event Player, Multiply(Divide(Global Variable(playerHealth), Max Health(Event Player)), 100));
        Set Player Health(Event Player, 250);
    }
}

rule("playerLeft")
{

    event
    {
        Player Left Match;
        All;
        All;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    // Action count: 5
    actions
    {
        Big Message(All Players(Team(All)), Custom String("{0} got scared and ran away!", Event Player, Null, Null));
        If(Compare(Team Of(Event Player), ==, Team(Team2)));
            Declare team Victory(Team(Team1));
            Call Subroutine(EndGame);
        End;
    }
}

rule("playerJoined")
{

    event
    {
        Player Joined Match;
        All;
        All;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    // Action count: 2
    actions
    {
        Big Message(All Players(Team(All)), Custom String("{0} ain't scared of no ghost", Event Player, Null, Null));
        Move Player To Team(Event Player, Team(Team1), -1);
    }
}

rule("hiddenHUD")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
    }

    // Action count: 2
    actions
    {
        Create In-World Text(Global Variable(HiddenPlayer), Custom String("{0}: Dash\n{1}: Melee\n{2}: Ultimate", Button(Secondary Fire), Button(Primary Fire), Button(Ultimate)), Update Every Frame(Add(Eye Position(Local Player), Multiply(100, Add(Add(Multiply(2, World Vector Of(Right, Local Player, Rotation)), Multiply(-1.2, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90)))), Multiply(3, Facing Direction Of(Local Player)))))), 2, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Create Progress Bar HUD Text(Global Variable(HiddenPlayer), Global Variable(charge), Null, Top, 0, Color(Gray), Color(White), Values, Default Visibility);
    }
}

rule("recharge")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Or(Is Game In Progress, Global Variable(debugMode)) == True;
        Not(Is On Wall(Global Variable(HiddenPlayer))) == True;
        Not(Global Variable(ultActive)) == True;
        Global Variable(charge) < Global Variable(maxCharge);
    }

    // Action count: 3
    actions
    {
        Set Global Variable(charge, If-Then-Else(Compare(Add(Global Variable(charge), Multiply(Global Variable(rechargeRate), Divide(1, Global Variable(tickrate)))), >=, 100), 100, Add(Global Variable(charge), Multiply(Global Variable(rechargeRate), Divide(1, Global Variable(tickrate))))));
        Wait(Divide(1, Global Variable(tickrate)), Abort When False);
        Loop;
    }
}

rule("toggleDebugMode")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Game In Progress == False;
        Is Button Held(Host Player, Button(Interact)) == True;
    }

    // Action count: 15
    actions
    {
        If(Global Variable(debugMode));
            Destroy All Dummy Bots;
            Call Subroutine(removeHiddenProps);
            Set Global Variable(HiddenPlayer, Null);
            Set Global Variable(debugMode, False);
        Else;
            If(Compare(Team Of(Host Player), ==, Team(Team1)));
                Create Dummy Bot(Hero(Genji), Team(Team2), -1, Host Player, Host Player);
                Set Global Variable(HiddenPlayer, Closest Player To(Host Player, Team(All)));
            Else;
                Create Dummy Bot(Hero(Doomfist), Team(Team1), -1, Host Player, Host Player);
                Set Global Variable(HiddenPlayer, Host Player);
            End;
            Set Global Variable(debugMode, True);
        End;
    }
}
